class Solution {
public:
    int maxFrequency(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int,int> mpp;
        int cntk = 0;
        for(auto x : nums) {
            if(x==k)cntk++;
            mpp[x]++;
        }
        int ans = cntk;
        for(int i=1;i<51;i++){
            if(mpp.find(i) != mpp.end() && i!= k){
                vector<int>v(n);
                for(int j=0;j<n;j++){
                    if(nums[j]==k) v[j] = -1;
                    else if(nums[j]==i) v[j] = 1;
                    else v[j] = 0;
                }
                int sum = 0 ,csum = 0;
                for(int j=0;j<n;j++){
                    csum += v[j];
                    if(csum<0) csum = 0;
                    sum = max(sum ,csum);
                }
                int val = cntk + mpp[i] - (mpp[i]-sum);
                cout<<val<<endl;
                ans = max(ans, val);
            }
        }
        return ans;
    }
};